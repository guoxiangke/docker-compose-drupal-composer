<?php
/**
 * Implements hook_libraries_info().
 */
function htmlpurifier8_libraries_info() {
  $libraries['htmlpurifier'] = array(
    'name' => 'PHP HTML clean',
    'vendor url' => 'http://htmlpurifier.org',
    'download url' => 'http://htmlpurifier.org/download',
    'path' => 'library',
    'version arguments' => array(
      'file' => 'HTMLPurifier.includes.php',
      'pattern' => '/version ([0-9\.]+)/',
      'lines' => 10,
    ),
    'files' => array(
      'php' => array('HTMLPurifier.auto.php'),
    ),
  );
  return $libraries;
}
/**
 * Loads the HTML Purifier library, and performs global initialization.
 */
function _htmlpurifier_load() {
  static $done = FALSE;
  if ($done) {
    return;
  }
  $done = TRUE;
  // $module_path = drupal_get_path('module', 'htmlpurifier');
  // $library_path = $module_path;
  $library_path = libraries_get_path('htmlpurifier');
  require_once "$library_path/library/HTMLPurifier.auto.php";
  // libraries_load('htmlpurifier');
  // dpm(__LINE__);
  // require_once "$module_path/HTMLPurifier_DefinitionCache_Drupal.php";

  // $factory = HTMLPurifier_DefinitionCacheFactory::instance();
  // $factory->register('Drupal', 'HTMLPurifier_DefinitionCache_Drupal');

  // $config = HTMLPurifier_Config::createDefault();
  // $purifier = new HTMLPurifier($config);
  // $clean_html = $purifier->purify($dirty_html);
}


/**
 * Returns the HTMLPurifier_Config object corresponding to a text format.
 * @param int $format
 *    (Optional) Text format ID. If left empty, the default configuration is
 *    returned.
 * @return
 *    Instance of HTMLPurifier_Config.
 */
function _htmlpurifier_get_config($format = 0) {

  $config = HTMLPurifier_Config::createDefault();

  $config->set('AutoFormat.AutoParagraph', TRUE);
  $config->set('AutoFormat.Linkify', TRUE);
  $config->set('HTML.Doctype', 'XHTML 1.0 Transitional'); // Probably
  $config->set('Core.AggressivelyFixLt', TRUE);
  // $config->set('Cache.DefinitionImpl', 'Drupal');

  if (!empty($_SERVER['HTTP_HOST'])) {
    // SERVER_NAME is more reliable than HTTP_HOST
    $config->set('URI.Host', $_SERVER['HTTP_HOST']);
  }
  $language = \Drupal::languageManager()->getCurrentLanguage();
  if (defined('LANGUAGE_RTL') && $language->getDirection() === LANGUAGE_RTL) {
    $config->set('Attr.DefaultTextDir', 'rtl');
  }

  if ($format && ($config_function = _htmlpurifier_config_load($format))) {
    // $config_function($config);
  }
  else {
    // // We only support one instance of this module's filters (either basic or
    // // advanced) per text format, so choose the first settings we find.
    // // TODO: This is awkward, but the most straightforward conversion from the
    // // D6 version, which also treated this as a per-format setting and
    // // therefore had the same limitation.

    // //array_keys(filter_formats())
    // $filters = $format ? filter_list_format($format) : array();
    // if (!empty($filters['htmlpurifier_advanced']->status) && isset($filters['htmlpurifier_advanced']->settings['htmlpurifier_advanced_config'])) {
    //   $config_data = $filters['htmlpurifier_advanced']->settings['htmlpurifier_advanced_config'];
    // }
    // elseif (!empty($filters['htmlpurifier_basic']->status) && isset($filters['htmlpurifier_basic']->settings['htmlpurifier_basic_config'])) {
    //   $config_data = $filters['htmlpurifier_basic']->settings['htmlpurifier_basic_config'];
    // }
    // else {
    //   $config_data = FALSE;
    // }

    // // if (!empty($config_data['Filter.ExtractStyleBlocks'])) {
    // //   if (!_htmlpurifier_load_csstidy()) {
    // //     $config_data['Filter.ExtractStyleBlocks'] = '0';
    // //     drupal_set_message(t("Could not enable ExtractStyleBlocks because CSSTidy was not installed.  You can download CSSTidy module from <a href='http://drupal.org/project/csstidy'>http://drupal.org/project/csstidy</a>"), 'error', FALSE);
    // //   }
    // // }
    // // {FALSE, TRUE, FALSE} = {no index, everything is allowed, don't do mq fix}
    // $config->mergeArrayFromForm($config_data, FALSE, TRUE, FALSE);
  }

  return $config;

}

/**
 * Processes HTML according to a format and returns purified HTML. Makes a
 * cache pass if possible.
 *
 * @param string $text
 *    Text to purify
 * @param object $filter
 *   The filter object containing settings for the given format.
 * @param object $format
 *    The format object of the text to be filtered.
 * @param string $langcode
 *    The language code of the text to be filtered.
 * @param boolean $cache
 *    Whether or not to check the cache.
 *
 * @note
 *    We ignore $delta because the only difference it makes is in the configuration
 *    screen.
 */
function htmlpurifier_process_text($text, $filter=0, $format=0, $langcode=0, $cache = TRUE) {
  // No need to run the filter if there isn't anything to filter
  // See https://drupal.org/node/1821178
  if ($text === '') {
    return;
  }

  if ($cache) {//TODO > 8 
    // $cid = $format->format . ':' . $langcode . ':' . hash('sha256', $text);
    // $old = cache_get($cid, 'cache_htmlpurifier');
    // if ($old) return $old->data;
  }

  _htmlpurifier_load();
  $config = _htmlpurifier_get_config(0);//$format->format

  // // If ExtractStyleBlocks is enabled, we'll need to do a bit more for CSSTidy
  // $config_extractstyleblocks = $config->get('Filter.ExtractStyleBlocks');

  // // Maybe this works if CSSTidy is at root? CSSTidy could be other places though
  // if ($config_extractstyleblocks == TRUE) {
  //   _htmlpurifier_load_csstidy();
  // }

  $purifier = new HTMLPurifier($config);
  $ret = $purifier->purify($text);

  // // If using Filter.ExtractStyleBlocks we need to handle the CSSTidy output
  // if ($config_extractstyleblocks == TRUE) {

  //   // We're only going to bother if we're caching! - no caching? no style blocks!
  //   if ($cache) {

  //     // Get style blocks, cache them, and help hook_nodeapi find the cache
  //     $styles = $purifier->context->get('StyleBlocks');
  //     cache_set('css:' . $cid, $styles, 'cache_htmlpurifier', CACHE_PERMANENT);
  //     $ret = '<!-- HTML Purifier Cache #' . $cid . ' -->' . $ret;
  //   }
  // }

  // if ($cache) cache_set($cid, $ret, 'cache_htmlpurifier', CACHE_PERMANENT);

  return $ret;
}


/**
 * Returns the name of the configuration function for $format, or FALSE if none
 * exists. Function name will be htmlpurifier_config_N.
 *
 * @param int $format
 *    Integer format to check function for.
 * @return
 *    String function name for format, or FALSE if none.
 */
function _htmlpurifier_config_load($format) {
	$module_handler = Drupal::service('module_handler');
	$path = $module_handler->getModule('htmlpurifier8')->getPath();
	$config_file = $path . "/config/$format.php";
  // $config_file = drupal_get_path('module', 'htmlpurifier8') . "/config/$format.php";
  $config_function = "htmlpurifier_config_$format";
  if (
    !function_exists($config_function) &&
    file_exists($config_file)
  ) {
    include_once $config_file;
  }
  return function_exists($config_function) ? $config_function : FALSE;
}
